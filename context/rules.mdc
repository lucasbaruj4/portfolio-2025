---
alwaysApply: true
---
# Development Rules and Standards

This document defines the development standards for the personal portfolio project. All code, including contributions from AI assistants, must adhere to these rules.

## 1. Code Style and Formatting
- **Linter/Formatter:** The project will use ESLint and Prettier, configured to run on pre-commit hooks.
- **JavaScript/TypeScript:** Follow the Airbnb Style Guide for general best practices.

## 2. Architecture and Design Principles
- **Component-Based Architecture:** The UI must be built with small, reusable, single-responsibility React components.
- **Static First:** All pages and content must be buildable as static assets (SSG). Client-side rendering (CSR) should be used only where absolutely necessary.
- **Props-Driven:** Components should be stateless where possible, receiving data and callbacks via props.

## 3. Naming Conventions
- **Components:** PascalCase (e.g., `ProjectCard.tsx`).
- **Variables/Functions:** camelCase (e.g., `getUserData`).
- **CSS Utility Classes:** Follow Tailwind CSS conventions.
- **Files:** Use kebab-case for non-component files (e.g., `api-helpers.ts`).

## 4. MANDATORY SECURITY GUARDRAILS (AI MUST FOLLOW)
- **NEVER Store Secrets in Code:** All API keys, endpoint URLs, or other secrets MUST be stored in environment variables (`.env.local`) and this file MUST be included in `.gitignore`. The AI assistant is forbidden from hardcoding any secret.
- **ALWAYS Validate and Sanitize Inputs:** While this project has minimal input, the principle applies. The contact form must have robust client-side validation.
- **USE SECURE DEFAULTS:** When using external libraries (e.g., Framer Motion, Formspree), use them according to their security best practices. Links in project data should have `rel="noopener noreferrer"` to prevent tabnabbing.
- **NO `dangerouslySetInnerHTML`:** The AI assistant is prohibited from using this React property to prevent XSS vulnerabilities.
- **ENABLE DEPENDENCY SCANNING:** GitHub's Dependabot must be enabled on the repository to automatically detect and report vulnerable dependencies.

## 5. Testing Requirements
- **Manual Testing:** Thoroughly test all functionality on major browsers and devices (or via browser dev tools).
- **Component Storybook (Optional):** For larger projects, use Storybook to develop and test components in isolation.
- **Validation:** Test all links, form submissions, and responsive breakpoints.

## 6. Git Workflow
- **Branching:** Use feature branches for new development (e.g., `feature/contact-form`).
- **Commit Messages:** Follow the Conventional Commits specification (e.g., `feat: add project gallery section`).
- **Pull Requests:** All code must be reviewed via a Pull Request before merging to `main`.

## 7. Documentation
- **Component Props:** All React components must have their props documented using TypeScript interfaces or JSDoc.
- **Complex Logic:** Any non-obvious code or complex algorithm must be accompanied by a clear comment explaining its purpose.